[{"path":"https://transltr.ununoctium.dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jean-Mathieu Potvin Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jean-Mathieu Potvin. Author, maintainer, copyright holder. Jérôme Lavoué. Contributor, funder, reviewer.","code":""},{"path":"https://transltr.ununoctium.dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Potvin J (2025). transltr: Support Many Languages R. R package version 0.1.0, https://transltr.ununoctium.dev.","code":"@Manual{,   title = {transltr: Support Many Languages in R},   author = {Jean-Mathieu Potvin},   year = {2025},   note = {R package version 0.1.0},   url = {https://transltr.ununoctium.dev}, }"},{"path":"https://transltr.ununoctium.dev/index.html","id":"support-many-languages-in-r","dir":"","previous_headings":"","what":"Support Many Languages in R","title":"Support Many Languages in R","text":"object model source text translations. Find extract translatable strings. Provide translations seamlessly retrieve runtime.","code":""},{"path":"https://transltr.ununoctium.dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Support Many Languages in R","text":"R relies GNU gettext produce multi-lingual messages (Native Language Support enabled). well-designed software offering extensive set functionalities. ubiquitous withstood test time. objective   transltr (fully) replace . Package transltr provides alternative -memory object model (functions) easily inspect manipulate source text translations. ✅ change aspect underlying locale. ✅ data serialization formats /O purposes. Source text translations can exported text formats sharable easily modifiable, even non-technical collaborators. ✅ features extensively documented (even internal ones). ✅ can always locate extract translatable strings (matter source code). ✅ Translatable source text treated regular R object.","code":""},{"path":"https://transltr.ununoctium.dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Support Many Languages in R","text":"Install package preferred CRAN mirror. extensive set unit tests fully covers current version transltr, features modified future. Treat beta version version 1.0.0 released.","code":"install.packages(\"transltr\")"},{"path":"https://transltr.ununoctium.dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Support Many Languages in R","text":"Write code normally . Whenever piece text (literal character vectors) available multiple languages, pass method Translator$translate(). may also use function. ready work translating project, call find_source(). returns  Translator object. Export  Translator object  translator_write(). Fill underlying translation files. Import translations back R session  translator_read(). Current language source language respectively set  language_set() language_source_get(). default, latter set equal  \"en\"  (English).","code":"tr <- transltr::translator()  # Write code. cat(tr$translate(\"Hello, world!\"), \"\\n\") cat(tr$translate(\"Farewell, world!\"), \"\\n\")  # Custom functions can also be used. cat(internationalize(\"Hello, world!\"), \"\\n\") cat(internationalize(\"Farewell, world!\"), \"\\n\") # Extract source text and create a new Translator object. find_source()  # Use arg interface if a custom function was used. # You may also pass an existing Translator object. find_source(tr = tr, interface = quote(internationalize)) find_source(tr = tr, interface = quote(pkg::internationalize))"},{"path":"https://transltr.ununoctium.dev/index.html","id":"future-improvements","dir":"","previous_headings":"","what":"Future Improvements","title":"Support Many Languages in R","text":"informal approximative roadmap package available GitHub.","code":""},{"path":"https://transltr.ununoctium.dev/index.html","id":"bugs-and-feedback","dir":"","previous_headings":"","what":"Bugs and Feedback","title":"Support Many Languages in R","text":"may submit bugs, request features, provide feedback creating issue GitHub.","code":""},{"path":"https://transltr.ununoctium.dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Support Many Languages in R","text":"Warm thanks Jérôme Lavoué, gladly supported sponsored first release project.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.0.html","id":"transltr-001","dir":"News","previous_headings":"","what":"transltr 0.0.1","title":"Version 0.0","text":"CRAN release: 2025-01-24 first release package. extensive set unit tests fully covers , features modified future. Treat beta version version 1.0.0 released.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"transltr-010","dir":"News","previous_headings":"","what":"transltr 0.1.0","title":"Version 0.1","text":"CRAN release: 2025-02-14","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"breaking-changes-0-1-0","dir":"News","previous_headings":"transltr 0.1.0","what":"Breaking Changes","title":"Version 0.1","text":"features still well tested documented, may change near future. thinking introducing many small changes interface classes Text Translator. leverage native UTF-8 support Windows, use function shorthands (\\(...)) use native pipe operator |> related placeholders _. package dramatically increases performance normalize(). usage within package gradually increase time. Option transltr.default.path renamed transltr.path. constant() removed. technically unexported function, used pass default values many function arguments. find_source() loses argument strict. replaced new argument interface. as_text.call() loses arguments strict validate following new interface mechanism find_source(). rewritten accordingly. translate() removed replaced new interface mechanism find_source(). See documentation latter information.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"new-features-0-1-0","dir":"News","previous_headings":"transltr 0.1.0","what":"New Features","title":"Version 0.1","text":"Users may migrate new mechanism binding deprecated symbol translate function calls method Translator$translate() environment choice (fits). New option transltr.verbose. can used set verbose arguments either TRUE FALSE. New function normalize(). latter used internal now exported convenience. documents strings standardized. New method Translator$set_default_value(). controls methods Translator$translate() Translator$get_translation() return translation. Documentation find_source() class Translator now thorough. Many details added package’s documentation overall. also simplified whenever appropriate.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"bug-fixes-0-1-0","dir":"News","previous_headings":"transltr 0.1.0","what":"Bug Fixes","title":"Version 0.1","text":"Consequently, serialize() serialize_translations(). normalize() now handles edge cases appropriately thanks stringi. format.Text() format.Translator() now escape newline characters. Identifiers serialized Location objects embedded serialized Text objects now much shorter. find_source() uses relative paths (project’s working directory) default.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"notes-0-1-0","dir":"News","previous_headings":"transltr 0.1.0","what":"Notes","title":"Version 0.1","text":"official title package (appears DESCRIPTION) now Support Many Languages R. package now pkgdown website. See https://transltr.ununoctium.dev. yet complete requires work. lot typos corrected documentation. Comments included Translator translations files updated. outputs, Source Text now used (used pluralized). source code (lightly) tidied.","code":""},{"path":"https://transltr.ununoctium.dev/news/news-0.1.html","id":"translations-0-1-0","dir":"News","previous_headings":"transltr 0.1.0","what":"Translations","title":"Version 0.1","text":"package yet translated.","code":""},{"path":"https://transltr.ununoctium.dev/reference/assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertions — is_int","title":"Assertions — is_int","text":"functions functional implementation defensive programming. is_*() functions check whether argument meets certain criteria. assert_*() functions throw error message least one criterion met. Arguments listed explicitly validated efficiency.","code":""},{"path":"https://transltr.ununoctium.dev/reference/assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertions — is_int","text":"","code":"is_int(x, allow_empty = FALSE)  is_chr(x, allow_empty = FALSE)  is_lgl1(x)  is_int1(x)  is_chr1(x, allow_empty_string = FALSE)  is_list(x, allow_empty = FALSE)  is_between(x, min = -Inf, max = Inf)  is_named(x, allow_empty_names = FALSE, allow_na_names = FALSE)  is_match(x, choices = vector(), allow_partial = FALSE)  assert_int(   x,   allow_empty = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_chr(   x,   allow_empty = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_lgl1(x, throw_error = TRUE, x_name = deparse(substitute(x)))  assert_int1(x, throw_error = TRUE, x_name = deparse(substitute(x)))  assert_chr1(   x,   allow_empty_string = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_list(   x,   allow_empty = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_between(   x,   min = -Inf,   max = Inf,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_named(   x,   allow_empty_names = FALSE,   allow_na_names = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_match(   x,   choices,   allow_partial = FALSE,   quote_values = FALSE,   throw_error = TRUE,   x_name = deparse(substitute(x)) )  assert_arg(x, quote_values = FALSE, throw_error = TRUE)  assert(x, ...)  # Default S3 method assert(x, ...)"},{"path":"https://transltr.ununoctium.dev/reference/assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertions — is_int","text":"x R object. allow_empty non-NA logical value. vectors length 0 considered valid values? allow_empty_string non-NA logical value. empty character strings considered valid values? min non-NA numeric lower bound. can infinite. max non-NA numeric upper bound. can infinite. allow_empty_names non-NA logical value. empty character strings considered valid names? different names . allow_na_names non-NA logical value. NA values considered valid names? choices non-empty vector valid candidates. allow_partial non-NA logical value. x partially matched? throw_error non-NA logical value. error thrown? , stops() called. Otherwise, error messages returned character vector (possibly empty). x_name non-empty non-NA character string. name x. quote_values non-NA logical value. Passed str_to().","code":""},{"path":"https://transltr.ununoctium.dev/reference/assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertions — is_int","text":"is_int(), is_chr(), is_lgl1(), is_int1(), is_chr1(), is_list(), is_between(), is_named(), is_match() return logical value. assert(), assert_int(), assert_chr(), assert_lgl1(), assert_int1(), assert_chr1(), assert_list(), assert_between(), assert_named(), assert_match(), assert_arg() return empty character vector x meets underlying criteria throw error otherwise. throw_error FALSE, error message returned character vector. Unless otherwise stated, latter length 1 (character string). assert.default() always returns empty character vector.","code":""},{"path":"https://transltr.ununoctium.dev/reference/assert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assertions — is_int","text":"Guard clauses tend verbose recycled many times within project. makes hard keep error messages consistent time. assert_*() functions encapsulate usual guard clause simple semantic functions. reduces code repetition number required unit tests. See Examples . convention, NA values always disallowed. assert_arg() partial refactoring base::match.arg(). relies assert_match() internally equivalent is_arg() function. must called within another function. assert() S3 generic function covers specific data structures. Classes (underlying objects) assert() method considered valid default.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location-ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Source Ranges — range_format","title":"Source Ranges — range_format","text":"Create, parse, validate source ranges.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location-ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Ranges — range_format","text":"","code":"range_format(x = location())  range_parse(ranges = character())  range_is_parseable(ranges = character())"},{"path":"https://transltr.ununoctium.dev/reference/class-location-ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Ranges — range_format","text":"x Location object. ranges character vector non-NA non-empty values. ranges extract pairs indices (line, column) .","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location-ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source Ranges — range_format","text":"range_format() returns character vector. assumes x valid. range_parse() returns list length ranges. element integer vectors containing 4 non-NA values (unless underlying range invalid). range_is_parseable() returns logical vector length ranges.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location-ranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source Ranges — range_format","text":"Ranges Ln <int>, Col <int> @ Ln <int>, Col <int> strings created --fly Location objects outputting purposes.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":null,"dir":"Reference","previous_headings":"","what":"Source Locations — location","title":"Source Locations — location","text":"Structure manipulate source locations. Class Location lighter alternative srcfile() related functionalities.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Locations — location","text":"","code":"location(path = tempfile(), line1 = 1L, col1 = 1L, line2 = 1L, col2 = 1L)  is_location(x)  # S3 method for class 'Location' format(x, ...)  # S3 method for class 'Location' print(x, ...)  # S3 method for class 'Location' c(...)  merge_locations(...)"},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Locations — location","text":"path non-empty non-NA character string. origin ranges. line1, col1 non-empty integer vector non-NA values. (inclusive) starting point(s) referenced. line2, col2 non-empty integer vector non-NA values. (inclusive) end(s) referenced. x R object. ... Usage depends underlying function. number Location objects merge_locations() S3 method c(). arguments passed methods format() print().","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source Locations — location","text":"location(), c() return named list length 5 S3 class Location containing values path, line1, col1, line2, col2. is_location() returns logical value. format() returns character vector. print() returns argument x invisibly. merge_locations() returns list (combined) Location objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source Locations — location","text":"Location set one line/column ranges referencing contents (like text source code) within common origin identified underlying path. latter generic can anything: file disk, network, pointer, binding, etc. matters underlying context. Location objects may refer multiple distinct ranges origin. arguments line1, col1, line2 col2 accept integer vectors (scalar values).","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"combining-location-objects","dir":"Reference","previous_headings":"","what":"Combining Location Objects","title":"Source Locations — location","text":"c() can combine Location objects path. case, underlying ranges combined set non-duplicated range(s). merge_locations() generalized version c() handles number Location objects possibly different paths. can viewed vectorized version c().","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Locations — location","text":"","code":"# Create Location objects. loc1 <- location(\"file-a\", 1L, 2L, 3L, 4L) loc2 <- location(\"file-a\", 5L, 6L, 7L, 8L) loc3 <- location(\"file-c\", c(9L, 10L), c(11L, 12L), c(13L, 14L), c(15L, 16L))  is_location(loc1)  ## TRUE  print(loc1) print(loc2) print(loc3)  # Combine Location objects. # c() throws an error if they do not have the same path. c(loc1, loc2)  # Location objects with different paths can be merged. # This groups Location objects according to their paths # and calls c() on each group. It returns a list. merge_locations(loc1, loc2, loc3)  # The path of a Location object can be whatever fits the context. # Below is an example that references text in a character vector # bound to variable x in the global environment. x <- \"This is a string and it is held in memory for some purpose.\" location(\"<environment: R_GlobalEnv: x>\", 1L, 11L, 1L, 16L)"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":null,"dir":"Reference","previous_headings":"","what":"Source Text — text","title":"Source Text — text","text":"Structure source text translations.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"text(..., source_lang = language_source_get(), algorithm = algorithms())  is_text(x)  # S3 method for class 'Text' format(x, ...)  # S3 method for class 'Text' print(x, ...)  # S3 method for class 'Text' c(...)  merge_texts(..., algorithm = algorithms())  as_text(x, ...)  # S3 method for class 'call' as_text(x, loc = location(), algorithm = algorithms(), ...)"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"... Usage depends underlying function. number Location objects /named character strings text() (preferred order). number Text objects merge_texts() S3 method c(). arguments passed methods format(), print(), as_text(). source_lang non-empty non-NA character string. language source text. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1. maximizes portability cross-compatibility packages. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes. x R object. loc Location object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source Text — text","text":"text(), c(), as_text() return R6 object class Text. is_text() returns logical value. format() returns character vector. print() returns argument x invisibly. merge_texts() returns list (combined) Text objects. can empty underlying Text objects empty.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text — text","text":"Text object piece source text extracted R source scripts. (typically) one Locations within project. zero translations. Text class structures information exposes set methods manipulate .","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"combining-text-objects","dir":"Reference","previous_headings":"","what":"Combining Text Objects","title":"Source Text — text","text":"c() can combine Text objects hash. equivalent algorithm, source_lang, source_text. case, underlying translations Location objects combined new object returned. throws error Text objects empty (set source_lang). merge_texts() generalized version c() handles number Text objects possibly different hashes. can viewed vectorized version c(). silently ignores drops empty Text objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"coercion","dir":"Reference","previous_headings":"","what":"Coercion","title":"Source Text — text","text":"as_text() S3 generic function attempts coerce argument suitable Text object. as_text.call() method used find_source() coerce call object Text object. can used, avoided time. Users may extend defining methods.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Source Text — text","text":"hash non-empty non-NA character string. reproducible hash generated source_lang source_text, using algorithm specified algorithm. used unique identifier underlying Text object. read-field. automatically updated whenever fields source_lang /algorithm updated. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes. source_lang non-empty non-NA character string. language source text. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1. maximizes portability cross-compatibility packages. source_text non-empty non-NA character string. source text. read-field. languages character vector. Registered language codes. read-field. Use methods update . translations named character vector. Registered translations source_text, including latter. Names correspond languages. read-field. Use methods update . locations list Location objects giving location(s) source_text underlying project. can empty. read-field. Use methods update .","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Source Text — text","text":"Text$new() Text$get_translation() Text$set_translation() Text$set_translations() Text$set_locations() Text$rm_translation() Text$rm_location()","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Source Text — text","text":"Create Text object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$new(algorithm = algorithms())"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"R6 object class Text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"# Consider using text() instead. txt <- Text$new()"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-get-translation-","dir":"Reference","previous_headings":"","what":"Method get_translation()","title":"Source Text — text","text":"Extract translation, source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$get_translation(lang = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"character string. NULL returned requested translation available.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"txt <- Text$new() txt$set_translation(\"en\", \"Hello, world!\")  txt$get_translation(\"en\")  ## Outputs \"Hello, world!\" txt$get_translation(\"fr\")  ## Outputs NULL"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-set-translation-","dir":"Reference","previous_headings":"","what":"Method set_translation()","title":"Source Text — text","text":"Register translation, source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$set_translation(lang = \"\", text = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility. text non-empty non-NA character string. translation, source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text — text","text":"method also used register source_lang source_text setting . See Examples .","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"# Register a pair of source_lang and source_text. txt <- Text$new() txt$set_translation(\"en\", \"Hello, world!\") txt$source_lang <- \"en\""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-set-translations-","dir":"Reference","previous_headings":"","what":"Method set_translations()","title":"Source Text — text","text":"Register one translations, /source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$set_translations(...)"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"... number named, non-empty, non-NA character strings.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text — text","text":"method can viewed vectorized version method set_translation().","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"txt <- Text$new() txt$set_translations(en = \"Hello, world!\", fr = \"Bonjour, monde!\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-set-locations-","dir":"Reference","previous_headings":"","what":"Method set_locations()","title":"Source Text — text","text":"Register one locations.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$set_locations(...)"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"... number Location objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text — text","text":"method calls merge_locations() merge values passed ... together previously registered Location objects. underlying registered paths /ranges duplicated.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"txt <- Text$new() txt$set_locations(   location(\"a\", 1L, 2L, 3L, 4L),   location(\"a\", 1L, 2L, 3L, 4L),   location(\"b\", 5L, 6L, 7L, 8L))"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-rm-translation-","dir":"Reference","previous_headings":"","what":"Method rm_translation()","title":"Source Text — text","text":"Remove registered translation.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$rm_translation(lang = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"lang non-empty non-NA character string identifying translation removed.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text — text","text":"remove lang registered current source_lang. must update source_lang .","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"txt <- Text$new() txt$set_translations(en = \"Hello, world!\", fr = \"Bonjour, monde!\") txt$source_lang <- \"en\"  # Remove source_lang and source_text. txt$source_lang <- \"fr\" txt$rm_translation(\"en\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"method-rm-location-","dir":"Reference","previous_headings":"","what":"Method rm_location()","title":"Source Text — text","text":"Remove registered location.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text — text","text":"","code":"Text$rm_location(path = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text — text","text":"path non-empty non-NA character string identifying Location object removed.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text — text","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"txt <- Text$new() txt$set_locations(   location(\"a\", 1L, 2L, 3L, 4L),   location(\"b\", 5L, 6L, 7L, 8L))  txt$rm_location(\"a\")"},{"path":"https://transltr.ununoctium.dev/reference/class-text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text — text","text":"","code":"# Set source language. language_source_set(\"en\")  # Create Text objects. txt1 <- text(   location(\"a\", 1L, 2L, 3L, 4L),   location(\"a\", 1L, 2L, 3L, 4L),   location(\"b\", 5L, 6L, 7L, 8L),   location(\"c\", c(9L, 10L), c(11L, 12L), c(13L, 14L), c(15L, 16L)),   en = \"Hello, world!\",   fr = \"Bonjour, monde!\",   es = \"¡Hola, mundo!\")  txt2 <- text(   location(\"a\", 1L, 2L, 3L, 4L),   en = \"Hello, world!\",   fr = \"Bonjour, monde!\",   es = \"¡Hola, mundo!\")  txt3 <- text(   source_lang = \"fr2\",   location(\"a\", 5L, 6L, 7L, 8L),   en  = \"Hello, world!\",   fr2 = \"Bonjour le monde!\",   es  = \"¡Hola, mundo!\")  is_text(txt1)  # Texts objects has a specific format. # print() calls format() internally, as expected. print(txt1) print(txt2) print(txt3)  # Combine Texts objects. # c() throws an error if they do not have the same # hash (same souce_text, source_lang, and algorithm). c(txt1, txt2)  # Text objects with different hashes can be merged. # This groups Text objects according to their hashes # and calls c() on each group. It returns a list. merge_texts(txt1, txt2, txt3)  # Objects can be coerced to a Text object with as_text(). Below is an # example for call objects. This is for illustration purposes only, # and the latter should not be used. This method is used internally by # find_source(). cl  <- str2lang(\"translate('Hello, world!')\") loc <- location(\"example in class-text\", 2L, 32L, 2L, 68L) as_text(cl, loc)   ## ------------------------------------------------ ## Method `Text$new` ## ------------------------------------------------  # Consider using text() instead. txt <- Text$new()  ## ------------------------------------------------ ## Method `Text$get_translation` ## ------------------------------------------------  txt <- Text$new() txt$set_translation(\"en\", \"Hello, world!\")  txt$get_translation(\"en\")  ## Outputs \"Hello, world!\" txt$get_translation(\"fr\")  ## Outputs NULL  ## ------------------------------------------------ ## Method `Text$set_translation` ## ------------------------------------------------  # Register a pair of source_lang and source_text. txt <- Text$new() txt$set_translation(\"en\", \"Hello, world!\") txt$source_lang <- \"en\"  ## ------------------------------------------------ ## Method `Text$set_translations` ## ------------------------------------------------  txt <- Text$new() txt$set_translations(en = \"Hello, world!\", fr = \"Bonjour, monde!\")  ## ------------------------------------------------ ## Method `Text$set_locations` ## ------------------------------------------------  txt <- Text$new() txt$set_locations(   location(\"a\", 1L, 2L, 3L, 4L),   location(\"a\", 1L, 2L, 3L, 4L),   location(\"b\", 5L, 6L, 7L, 8L))  ## ------------------------------------------------ ## Method `Text$rm_translation` ## ------------------------------------------------  txt <- Text$new() txt$set_translations(en = \"Hello, world!\", fr = \"Bonjour, monde!\") txt$source_lang <- \"en\"  # Remove source_lang and source_text. txt$source_lang <- \"fr\" txt$rm_translation(\"en\")  ## ------------------------------------------------ ## Method `Text$rm_location` ## ------------------------------------------------  txt <- Text$new() txt$set_locations(   location(\"a\", 1L, 2L, 3L, 4L),   location(\"b\", 5L, 6L, 7L, 8L))  txt$rm_location(\"a\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":null,"dir":"Reference","previous_headings":"","what":"Source Text and Translations — translator","title":"Source Text and Translations — translator","text":"Structure manipulate source text project translations.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"translator(..., id = uuid(), algorithm = algorithms())  is_translator(x)  # S3 method for class 'Translator' format(x, ...)  # S3 method for class 'Translator' print(x, ...)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"... Usage depends underlying function. number Text objects /named character strings translator() (preferred order). arguments passed methods format(), print(). id non-empty non-NA character string. globally unique identifier Translator object. Beware collisions using user-defined values. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes. x R object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source Text and Translations — translator","text":"translator() returns R6 object class Translator. is_translator() returns logical value. format() returns character vector. print() returns argument x invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text and Translations — translator","text":"Translator object encapsulates source text project (context) related translations. hood, Translator objects collections Text objects. work. treated lower-level component typical situations, users rarely interact . Translator objects can saved exported translator_write(). can imported back R session translator_read().","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Source Text and Translations — translator","text":"id non-empty non-NA character string. globally unique identifier underlying object. Beware plausible collisions using user-defined values. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes. hashes character vector non-empty non-NA values, NULL. set hash exposed registered Text objects. none, hashes NULL. read-field updated whenever field algorithm updated. source_texts character vector non-empty non-NA values, NULL. set registered source texts. none, source_texts NULL. read-field. source_langs character vector non-empty non-NA values, NULL. set registered source languages. read-field. none, source_langs NULL. one unique value, source_langs unnamed character string. Otherwise, named character vector. languages character vector non-empty non-NA values, NULL. set registered languages (codes). none, languages NULL. read-field. native_languages named character vector non-empty non-NA values, NULL. map (bijection) languages (codes) native language names. Names codes values native languages. none, native_languages NULL. users retain full control native_languages, best use well-known schemes IETF BCP 47, ISO 639-1. maximizes portability cross-compatibility packages. Update field method $set_native_languages(). See information.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Source Text and Translations — translator","text":"Translator$new() Translator$translate() Translator$get_translation() Translator$get_text() Translator$set_text() Translator$set_texts() Translator$rm_text() Translator$set_native_languages() Translator$set_default_value()","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Source Text and Translations — translator","text":"Create Translator object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$new(id = uuid(), algorithm = algorithms())"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"id non-empty non-NA character string. globally unique identifier Translator object. Beware collisions using user-defined values. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"R6 object class Translator.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"# Consider using translator() instead. tr <- Translator$new()"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-translate-","dir":"Reference","previous_headings":"","what":"Method translate()","title":"Source Text and Translations — translator","text":"Translate source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$translate(   ...,   lang = language_get(),   source_lang = language_source_get() )"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"... number vectors containing atomic elements. vector normalized paragraph. Elements coerced character values. NA values empty strings discarded. Multi-line strings supported encouraged. Blank lines interpreted (two newline characters) paragraph separators. lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility. source_lang non-empty non-NA character string. language source text. See argument lang information.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text and Translations — translator","text":"See normalize() details ... normalized.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"character string. corresponding translation, value passed method $set_default_value() returned. NULL returned default.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new() tr$set_text(en = \"Hello, world!\", fr = \"Bonjour, monde!\") tr$translate(\"Hello, world!\", lang = \"en\")  ## Outputs \"Hello, world!\" tr$translate(\"Hello, world!\", lang = \"fr\")  ## Outputs \"Bonjour, monde!\""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-get-translation-","dir":"Reference","previous_headings":"","what":"Method get_translation()","title":"Source Text and Translations — translator","text":"Extract translation source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$get_translation(hash = \"\", lang = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"hash non-empty non-NA character string. unique identifier requested source text. lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"character string. corresponding translation, value passed method $set_default_value() returned. NULL returned default.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  # Consider using translate() instead. tr$get_translation(\"256e0d7\", \"en\")  ## Outputs \"Hello, world!\""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-get-text-","dir":"Reference","previous_headings":"","what":"Method get_text()","title":"Source Text and Translations — translator","text":"Extract source text translations.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$get_text(hash = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"hash non-empty non-NA character string. unique identifier requested source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"Text object, NULL.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  tr$get_translation(\"256e0d7\", \"en\")  ## Outputs \"Hello, world!\""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-set-text-","dir":"Reference","previous_headings":"","what":"Method set_text()","title":"Source Text and Translations — translator","text":"Register source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$set_text(..., source_lang = language_source_get())"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"... Passed text(). source_lang Passed text().","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new()  tr$set_text(en = \"Hello, world!\", location())"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-set-texts-","dir":"Reference","previous_headings":"","what":"Method set_texts()","title":"Source Text and Translations — translator","text":"Register one source texts.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$set_texts(...)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"... number Text objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text and Translations — translator","text":"method calls merge_texts() merge values passed ... together previously registered Text objects. underlying registered source texts, translations, Location objects duplicated.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"# Set source language. language_source_set(\"en\")  tr <- Translator$new()  # Create Text objects. txt1 <- text(   location(\"a\", 1L, 2L, 3L, 4L),   en = \"Hello, world!\",   fr = \"Bonjour, monde!\")  txt2 <- text(   location(\"b\", 5L, 6L, 7L, 8L),   en = \"Farewell, world!\",   fr = \"Au revoir, monde!\")  tr$set_texts(txt1, txt2)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-rm-text-","dir":"Reference","previous_headings":"","what":"Method rm_text()","title":"Source Text and Translations — translator","text":"Remove registered source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$rm_text(hash = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"hash non-empty non-NA character string identifying source text remove.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  tr$rm_text(\"256e0d7\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-set-native-languages-","dir":"Reference","previous_headings":"","what":"Method set_native_languages()","title":"Source Text and Translations — translator","text":"Map language code native language name.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$set_native_languages(...)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"... number named, non-empty, non-NA character strings. Names codes values native languages. See field native_languages information.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new()  tr$set_native_languages(en = \"English\", fr = \"Français\")  # Remove existing entries. tr$set_native_languages(fr = NULL)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"method-set-default-value-","dir":"Reference","previous_headings":"","what":"Method set_default_value()","title":"Source Text and Translations — translator","text":"Register default value return corresponding translations requested language.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Text and Translations — translator","text":"","code":"Translator$set_default_value(value = NULL)"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Text and Translations — translator","text":"value NULL non-NA character string. can empty. former returned default.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Source Text and Translations — translator","text":"modifies methods $translate() $get_translation() returns translation lang.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Source Text and Translations — translator","text":"NULL, invisibly.","code":""},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"tr <- Translator$new() tr$set_default_value(\"<unavailable>\")"},{"path":"https://transltr.ununoctium.dev/reference/class-translator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Text and Translations — translator","text":"","code":"# Set source language. language_source_set(\"en\")  # Create a Translator object. # This would normally be done automatically # by find_source(), or translator_read(). tr <- translator(   id = \"test-translator\",   en = \"English\",   es = \"Español\",   fr = \"Français\",   text(     location(\"a\", 1L, 2L, 3L, 4L),     en = \"Hello, world!\",     fr = \"Bonjour, monde!\"),   text(     location(\"b\", 1L, 2L, 3L, 4L),     en = \"Farewell, world!\",     fr = \"Au revoir, monde!\"))  is_translator(tr)  # Translator objects has a specific format. # print() calls format() internally, as expected. print(tr)   ## ------------------------------------------------ ## Method `Translator$new` ## ------------------------------------------------  # Consider using translator() instead. tr <- Translator$new()  ## ------------------------------------------------ ## Method `Translator$translate` ## ------------------------------------------------  tr <- Translator$new() tr$set_text(en = \"Hello, world!\", fr = \"Bonjour, monde!\") tr$translate(\"Hello, world!\", lang = \"en\")  ## Outputs \"Hello, world!\" tr$translate(\"Hello, world!\", lang = \"fr\")  ## Outputs \"Bonjour, monde!\"  ## ------------------------------------------------ ## Method `Translator$get_translation` ## ------------------------------------------------  tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  # Consider using translate() instead. tr$get_translation(\"256e0d7\", \"en\")  ## Outputs \"Hello, world!\"  ## ------------------------------------------------ ## Method `Translator$get_text` ## ------------------------------------------------  tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  tr$get_translation(\"256e0d7\", \"en\")  ## Outputs \"Hello, world!\"  ## ------------------------------------------------ ## Method `Translator$set_text` ## ------------------------------------------------  tr <- Translator$new()  tr$set_text(en = \"Hello, world!\", location())  ## ------------------------------------------------ ## Method `Translator$set_texts` ## ------------------------------------------------  # Set source language. language_source_set(\"en\")  tr <- Translator$new()  # Create Text objects. txt1 <- text(   location(\"a\", 1L, 2L, 3L, 4L),   en = \"Hello, world!\",   fr = \"Bonjour, monde!\")  txt2 <- text(   location(\"b\", 5L, 6L, 7L, 8L),   en = \"Farewell, world!\",   fr = \"Au revoir, monde!\")  tr$set_texts(txt1, txt2)  ## ------------------------------------------------ ## Method `Translator$rm_text` ## ------------------------------------------------  tr <- Translator$new() tr$set_text(en = \"Hello, world!\")  tr$rm_text(\"256e0d7\")  ## ------------------------------------------------ ## Method `Translator$set_native_languages` ## ------------------------------------------------  tr <- Translator$new()  tr$set_native_languages(en = \"English\", fr = \"Français\")  # Remove existing entries. tr$set_native_languages(fr = NULL)  ## ------------------------------------------------ ## Method `Translator$set_default_value` ## ------------------------------------------------  tr <- Translator$new() tr$set_default_value(\"<unavailable>\")"},{"path":"https://transltr.ununoctium.dev/reference/constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Hashing Algorithms — algorithms","title":"Hashing Algorithms — algorithms","text":"algorithms map character string another character string hexadecimal characters highly likely unique. latter used uniquely identify source text (underlying source language).","code":""},{"path":"https://transltr.ununoctium.dev/reference/constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hashing Algorithms — algorithms","text":"","code":"algorithms()"},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/constants.html","id":"secure-hash-algorithm-","dir":"Reference","previous_headings":"","what":"Secure Hash Algorithm 1","title":"Hashing Algorithms — algorithms","text":"Method sha1 corresponds SHA-1 (Secure Hash Algorithm version 1), cryptographic hashing function. now superseded secure variants (SHA-256, SHA-512, etc.), still useful non-sensitive purposes. fast, collision-resistant, may handle large inputs. emits strings 40 hexadecimal characters.","code":""},{"path":"https://transltr.ununoctium.dev/reference/constants.html","id":"cumulative-utf-sum","dir":"Reference","previous_headings":"","what":"Cumulative UTF-8 Sum","title":"Hashing Algorithms — algorithms","text":"method experimental. Use caution. Method utf8 simple method derived cumulative sums UTF-8 code points (converted integers). slightly faster method sha1 small inputs emits hashes width porportional underlying input's length. used testing purposes internally.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source-in-file.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Source Text in Expressions — find_source_in_file","title":"Find Source Text in Expressions — find_source_in_file","text":"Find extract source text must translated single file set R expr tokens. Arguments listed explicitly validated efficiency.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source-in-file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Source Text in Expressions — find_source_in_file","text":"","code":"find_source_in_file(   path = \"\",   encoding = \"UTF-8\",   verbose = getOption(\"transltr.verbose\", TRUE),   algorithm = algorithms(),   interface = NULL )  find_source_in_exprs(   tokens = utils::getParseData(),   path = \"\",   algorithm = algorithms(),   interface = NULL )  find_source_exprs(path = \"\", encoding = \"UTF-8\")  is_source(x, interface = NULL)"},{"path":"https://transltr.ununoctium.dev/reference/find-source-in-file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Source Text in Expressions — find_source_in_file","text":"path non-empty non-NA character string. path R source script. encoding non-empty non-NA character string. source character encoding. almost cases, UTF-8. encodings internally re-encoded UTF-8 portability. verbose non-NA logical value. progress information reported? algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes. interface name, call object, NULL. reference alternative (custom) function used translate text. call object passed interface, must operator ::. Calls method Translator$translate() ignored calls interface extracted instead. See Details . tokens data.frame returned utils::getParseData(). must always minimally contain columns line1, col1, line2, col2, text. x R object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source-in-file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Source Text in Expressions — find_source_in_file","text":"find_source_in_file() find_source_in_exprs() return list Text objects. may contain duplicated elements, depending extracted contents. find_source_exprs() returns subset output utils::getParseData(). expr tokens returned. is_source() returns logical value.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source-in-file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Source Text in Expressions — find_source_in_file","text":"find_source_in_exprs() silently skips parsing errors. See find_source() information. is_source() checks object conceptually represents source text. can either call method Translator$translate() call custom function referenced interface. Calls method Translator$translate() include ... argument(s) ignored. calls part definition custom interface extracted.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Source Text — find_source","title":"Find Source Text — find_source","text":"Find extract source text must translated.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Source Text — find_source","text":"","code":"find_source(   path = \".\",   encoding = \"UTF-8\",   verbose = getOption(\"transltr.verbose\", TRUE),   tr = translator(),   interface = NULL )  find_source_in_files(   paths = character(),   encoding = \"UTF-8\",   verbose = getOption(\"transltr.verbose\", TRUE),   algorithm = algorithms(),   interface = NULL )"},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Source Text — find_source","text":"path non-empty non-NA character string. path directory containing R source scripts. subdirectories searched. Files .R, .Rprofile extension skipped. encoding non-empty non-NA character string. source character encoding. almost cases, UTF-8. encodings internally re-encoded UTF-8 portability. verbose non-NA logical value. progress information reported? tr Translator object. interface name, call object, NULL. reference alternative (custom) function used translate text. call object passed interface, must operator ::. Calls method Translator$translate() ignored calls interface extracted instead. See Details . paths character vector non-empty non-NA values. set paths R source scripts must searched. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Source Text — find_source","text":"find_source() returns R6 object class Translator. existing Translator object passed tr, modified place returned. find_source_in_files() returns list Text objects. may contain duplicated elements, depending extracted contents.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Source Text — find_source","text":"find_source() find_source_in_files() look calls method Translator$translate() R scripts convert Text objects. former sets resulting objects Translator object. See argument tr. find_source() find_source_in_files() work purely lexical basis. source code parsed never evaluated (aside extracted literal character vectors). underlying Translator object never evaluated need exist (placeholders may used source code). literal character vectors can passed arguments method Translator$translate().","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"interfaces","dir":"Reference","previous_headings":"","what":"Interfaces","title":"Find Source Text — find_source","text":"cases, may desirable call method Translator$translate() directly. custom function wrapping (interfacing) method may always used long signature method Translator$translate(). words, must minimally two formal arguments: ... source_lang. Custom interfaces must passed find_source() find_source_in_files() extraction purposes. Since functions work lexical basis, interfaces can placeholders source code (non- existent bindings) time functions called. However, must bound function (ultimately) calling Translator$translate() runtime. Custom interfaces passed find_source() find_source_in_files() name call objects variety ways. straightforward way use base::quote(). See Examples .","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"methodology","dir":"Reference","previous_headings":"","what":"Methodology","title":"Find Source Text — find_source","text":"find_source() find_source_in_files() go steps extract source text single R script. read text_read() re-encoded UTF-8 necessary. parsed parse() underlying tokens extracted parsed expressions utils::getParseData(). expression (expr) token converted language objects str2lang(). Parsing errors invalid expressions silently skipped. Valid call objects stemming step 3 filtered is_source(). Calls method Translator$translate() interface stemming step 4 coerced Text objects as_text(). steps repeated R script. find_source() merges resulting Text objects coherent set merge_texts() (identical source code merged single Text entities). Extracted character vectors always normalized consistency (step 5). See normalize() information.","code":""},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Find Source Text — find_source","text":"current version transltr can handle literal character vectors. means resolve non-trivial expressions depends state. values passed argument ... method Translator$translate() must yield character vectors (trivially).","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/find-source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Source Text — find_source","text":"","code":"# Create a directory containing dummy R scripts for illustration purposes. temp_dir   <- file.path(tempdir(TRUE), \"find-source\") temp_files <- file.path(temp_dir, c(\"ex-script-1.R\", \"ex-script-2.R\")) dir.create(temp_dir, showWarnings = FALSE, recursive = TRUE)  cat(   \"tr$translate('Hello, world!')\",   \"tr$translate('Farewell, world!')\",   sep  = \"\\n\",   file = temp_files[[1L]]) cat(   \"tr$translate('Hello, world!')\",   \"tr$translate('Farewell, world!')\",   sep  = \"\\n\",   file = temp_files[[2L]])  # Extract calls to method Translator$translate(). find_source(temp_dir) find_source_in_files(temp_files)  # Use custom functions. # For illustrations purposes, assume the package # exports an hypothetical translate() function. cat(   \"translate('Hello, world!')\",   \"transtlr::translate('Farewell, world!')\",   sep  = \"\\n\",   file = temp_files[[1L]]) cat(   \"translate('Hello, world!')\",   \"transltr::translate('Farewell, world!')\",   sep  = \"\\n\",   file = temp_files[[2L]])  # Extract calls to translate() and transltr::translate(). # Since find_source() and find_source_in_files() work on # a lexical basis, these are always considered to be two # distinct functions. They also don't need to exist in the # R session calling find_source() and find_source_in_files(). find_source(temp_dir, interface = quote(translate)) find_source_in_files(temp_files, interface = quote(transltr::translate))"},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize Objects to Flat Strings — flat_serialize","title":"Serialize Objects to Flat Strings — flat_serialize","text":"Serialize R objects textual sequences unindented (flat) identifiable sections. called FLAT (1.0) objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize Objects to Flat Strings — flat_serialize","text":"","code":"flat_serialize(x = list(), tag_sep = \": \", tag_empty = \"\")  flat_deserialize(string = \"\", tag_sep = \": \")  flat_tag(x = list(), tag_sep = \": \", tag_empty = \"\")  flat_format(x = list())  flat_example()"},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize Objects to Flat Strings — flat_serialize","text":"x list. can empty. tag_sep non-empty non-NA character string. separator use creating tags names (recursively) extracted x. tag_empty non-NA character string. value use substitute empty names. Positional indices automatically appended ensure tags always unique. string non-NA character string. can empty. Contents deserialize.","code":""},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize Objects to Flat Strings — flat_serialize","text":"flat_serialize() returns character string, possibly empty. flat_deserialize() returns named list, possibly empty. structure depends underlying tags. flat_tag() returns character vector, possibly empty. flat_format() returns unnamed list shape x. See Details. flat_example() returns character string (serialized example), invisibly. used side-effect printing illustration format (useful information).","code":""},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialize Objects to Flat Strings — flat_serialize","text":"Flat format (Flat List Text, FLAT) minimal textual data serialization format optimized R list objects. Elements converted character strings organized unindented sections identified tag. Call flat_example() valid example. flat_serialize() serializes x FLAT object. flat_deserialize() inverse operation: converts FLAT object back list. latter shape original one, atomic vectors reconstituted (deserialized elements length 1), elements also left character strings. convention serialize empty list empty character string.","code":""},{"path":"https://transltr.ununoctium.dev/reference/flat.html","id":"internal-mechanisms","dir":"Reference","previous_headings":"","what":"Internal mechanisms","title":"Serialize Objects to Flat Strings — flat_serialize","text":"flat_tag() flat_format() called internally flat_serialize(). Aside debugging purposes, called outside former. flat_tag() creates tags names extracted x formats . Tags may unique, depending x's structure names. flat_format() recursively formats elements x part serialization process. converts NULL \"NULL\" character string, converts elements character strings using format() replaces empty lists <empty list> constant treated placeholder.","code":""},{"path":"https://transltr.ununoctium.dev/reference/hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Hashing — hash","title":"Hashing — hash","text":"Map arbitrary character string shorter string hexadecimal characters highly likely unique. typically fixed width. Arguments listed validated efficiency.","code":""},{"path":"https://transltr.ununoctium.dev/reference/hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hashing — hash","text":"","code":"hash(lang = \"\", text = \"\", algorithm = \"\")"},{"path":"https://transltr.ununoctium.dev/reference/hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hashing — hash","text":"lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility. text non-NA character string. can empty. algorithm non-empty non-NA character string equal \"sha1\", \"utf8\". algorithm use hashing source information identification purposes.","code":""},{"path":"https://transltr.ununoctium.dev/reference/hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hashing — hash","text":"hash() returns character string, NULL algorithm supported.","code":""},{"path":"https://transltr.ununoctium.dev/reference/hash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hashing — hash","text":"Hashes generated hash() uniquely identify lang text pair. Values passed arguments concatenated colon character hashing purposes.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Language — language_set","title":"Get or Set Language — language_set","text":"Get set current, source languages. registered environment variables named TRANSLTR_LANGUAGE, TRANSLTR_SOURCE_LANGUAGE.","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Language — language_set","text":"","code":"language_set(lang = \"en\")  language_get()  language_source_set(lang = \"en\")  language_source_get()"},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Language — language_set","text":"lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility.","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or Set Language — language_set","text":"language_set(), language_source_set() return NULL, invisibly. used side-effect setting environment variables TRANSLTR_LANGUAGE TRANSLTR_SOURCE_LANGUAGE, respectively. language_get() returns character string. current value environment variable TRANSLTR_LANGUAGE. empty latter unset. language_source_get() returns character string. current value environment variable TRANSLTR_SOURCE_LANGUAGE. returns \"en\" latter unset.","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or Set Language — language_set","text":"language source language can always temporarily changed. See argument lang method Translator$translate() information. underlying locale left . change R session's locale, use Sys.setlocale() Sys.setLanguage() instead. See information.","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get or Set Language — language_set","text":"Environment variables used can shared among different processes. matters using parallel /concurrent R sessions. can shared among direct transitive dependencies (packages rely transltr).","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"locales-versus-languages","dir":"Reference","previous_headings":"","what":"Locales versus languages","title":"Get or Set Language — language_set","text":"locale set multiple low-level settings relate user's language region. language just one parameter among many others. Modifying locale --fly can considered risky situations. may optimal solution merely changing textual representations program application runtime, may introduce unintended changes induce subtle bugs harder fix. Moreover, makes sense applications /programs Shiny applications decouple front-end's current language (users see) back-end's locale (developers see). UI may displayed certain language keeping logs R internal messages, warnings, errors . Consequently, language setting transltr purposely kept separate underlying locale removes complexity support many . Users can always change locale language parameter package. See Examples.","code":""},{"path":"https://transltr.ununoctium.dev/reference/language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Language — language_set","text":"","code":"# Change the language parameters (globally). language_source_set(\"en\") language_set(\"fr\")  language_source_get()  ## Outputs \"en\" language_get()         ## Outputs \"fr\"  # Change both the language parameter and the locale. # Note that while users control how languages are named # for language_set(), they do not for Sys.setLanguage(). language_set(\"fr\") Sys.setLanguage(\"fr-CA\")  # Reset settings. language_source_set(NULL) language_set(NULL)  # Source language has a default value. language_source_get()  ## Outputs \"en\""},{"path":"https://transltr.ununoctium.dev/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Text — normalize","title":"Normalize Text — normalize","text":"Construct standardized string values passed ...","code":""},{"path":"https://transltr.ununoctium.dev/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Text — normalize","text":"","code":"normalize(...)"},{"path":"https://transltr.ununoctium.dev/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Text — normalize","text":"... number vectors containing atomic elements. vector normalized paragraph. Elements coerced character values. NA values empty strings discarded. Multi-line strings supported encouraged. Blank lines interpreted (two newline characters) paragraph separators.","code":""},{"path":"https://transltr.ununoctium.dev/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Text — normalize","text":"character string, possibly empty.","code":""},{"path":"https://transltr.ununoctium.dev/reference/normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Text — normalize","text":"Input text can written variety ways using single-line multi-line strings. Values passed ... normalized (ensure consistency) collapsed single character string using standard paragraph separator. latter defined two newline characters (\"\\n\\n\"). NA values empty strings discarded reducing ... character string. Whitespaces (tabs, newlines, repeated spaces) characters replaced single space. Paragraph separators preserved. Leading trailing whitespaces stripped.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize Objects — serialize","title":"Serialize Objects — serialize","text":"Convert Translator objects, Text objects, Location objects YAML object, vice-versa. Convert translations contained Translator object custom textual representation (FLAT object), vive-versa.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize Objects — serialize","text":"","code":"serialize(x, ...)  serialize_translations(tr = translator(), lang = \"\")  deserialize(string = \"\")  deserialize_translations(string = \"\", tr = NULL)  export_translations(tr = translator(), lang = \"\")  export(x, ...)  # S3 method for class 'Translator' export(x, ...)  # S3 method for class 'Text' export(x, id = uuid(), set_translations = FALSE, ...)  # S3 method for class 'Location' export(x, id = uuid(), ...)  # S3 method for class 'ExportedTranslator' assert(x, throw_error = TRUE, ...)  # S3 method for class 'ExportedText' assert(x, throw_error = TRUE, ...)  # S3 method for class 'ExportedLocation' assert(x, throw_error = TRUE, ...)  # S3 method for class 'ExportedTranslations' assert(x, throw_error = TRUE, ...)  import(x, ...)  # S3 method for class 'ExportedTranslator' import(x, ...)  # S3 method for class 'ExportedText' import(x, ...)  # S3 method for class 'ExportedLocation' import(x, ...)  # S3 method for class 'ExportedTranslations' import(x, tr = NULL, ...)  # Default S3 method import(x, ...)  format_errors(errors = character(), id = uuid(), throw_error = TRUE)"},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize Objects — serialize","text":"x R object. ... arguments passed , methods. tr Translator object. argument NULL default deserialize_translations() import.ExportedTranslations(). Translator object passed functions, import translations register (long correspond existing source text). lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility. string non-empty non-NA character string. Contents deserialize. id non-empty non-NA character string. unique identifier underlying object. used validation purposes. set_translations non-NA logical value. translations included resulting ExportedText object? FALSE, field Translations set equal NULL. throw_error non-NA logical value. error thrown? , stops() called. Otherwise, error messages returned character vector (possibly empty). errors non-empty character vector non-NA values. Error message(s) describing object(s) invalid.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize Objects — serialize","text":"See sections information. serialize(), serialize_translations() return character string. export() returns named list S3 class ExportedTranslator x Translator object, ExportedText x Text object, ExportedLocation x Location object. export_translations() returns ExportedTranslations object. deserialize() import() return Translator object x valid ExportedTranslator object, Text object x valid ExportedText object, Location object x valid ExportedLocation object. deserialize_translations() import.ExportedTranslations() return ExportedTranslations object. register imported translations Translator object passed tr. Translations must correspond existing source text (registered Text object). Otherwise, skipped. value passed tr updated reference returned. import.default() used side-effect throwing error unsupported objects. assert.ExportedTranslator(), assert.ExportedText(), assert.ExportedLocation(), assert.ExportedTranslations() return character vector, possibly empty. throw_error TRUE, error thrown object invalid. format_errors() returns character vector, outputs contents error throw_error TRUE.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialize Objects — serialize","text":"information contained within Translator object split default. Unless set_translations TRUE, translations serialized independently fields. useful creating Translator files translations files. serialize() serialize_translations() distinct, share common design perform thing, least conceptually. true deserialize() deserialize_translations(). 4 functions used almost circumstances.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"serialization","dir":"Reference","previous_headings":"","what":"Serialization","title":"Serialize Objects — serialize","text":"data serialization process performed serialize() serialize_translations() internally broken 2 steps: objects first exported serialized. export() export_translations() preserializing mechanisms convert objects transient objects ease conversion process. never returned user: serialize(), serialize_translations() immediately transform character strings. serialize() returns YAML object. serialize_translations() returns FLAT object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"deserialization","dir":"Reference","previous_headings":"","what":"Deserialization","title":"Serialize Objects — serialize","text":"data deserialization process performed deserialize() deserialize_translations() internally broken 3 steps: objects first deserialized, validated finally, imported. deserialize() deserialize_translations() raw deserializer mechanisms: string converted R named list presumed exported object. deserialize() relies YAML tags infer class object. contents transient objects thoroughly checked assert() method (based underlying presumed class). Valid objects imported back appropriate R object import(). Custom fields comments added users serialized objects ignored.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"formatting-errors","dir":"Reference","previous_headings":"","what":"Formatting errors","title":"Serialize Objects — serialize","text":"assert() methods accumulate error messages returning, throwing . format_errors() helper function eases process. exists avoid repeting code method. reason call outside assert() methods.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Serialize Objects — serialize","text":"Dividing serialization deserialization processes multiple steps helps keeping underlying functions short, easier test.","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"exported-objects","dir":"Reference","previous_headings":"","what":"Exported Objects","title":"Serialize Objects — serialize","text":"exported object named list S3 class ExportedTranslator, ExportedText, ExportedLocation, ExportedTranslations always tag attribute whose value equal super-class x. four main differences object exported counterpart. Field names slightly verbose. Source text treated independently translations. Unset fields set equal NULL (~ YAML). object Identifier used locate errors. correspondance objects self-explanatory. See class Translator information class ExportedTranslator. See class Text information class ExportedText. See class Location information class ExportedLocation. may also explore provided examples .","code":""},{"path":"https://transltr.ununoctium.dev/reference/serialize.html","id":"the-exportedtranslations-class","dir":"Reference","previous_headings":"","what":"The ExportedTranslations Class","title":"Serialize Objects — serialize","text":"ExportedTranslations objects created Translator object export_translations(). purpose restructure translations language. different exported objects corresponding Translations class. ExportedTranslations object named list S3 class ExportedTranslations containing following elements. Identifier unique identifier argument tr. See Translator$id information. Language Code value argument lang. Language translation's language. See Translator$native_languages information. Source Language source text's language. See Translator$source_langs information. Translations named list containing named lists. sublist contains two values: Source Text non-empty non-NA character string. Translation non-empty non-NA character string. See Text$translations information. Unavailable translations automatically replaced placeholder depends whether exported imported.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/text-io.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Write Text — text_read","title":"Read and Write Text — text_read","text":"text_read() text_write() respectively wrap base::readLines() base::writeLines(). validate arguments, normalize file paths re-encode inputs UTF-8 reading writing.","code":""},{"path":"https://transltr.ununoctium.dev/reference/text-io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Write Text — text_read","text":"","code":"text_read(path = \"\", encoding = \"UTF-8\")  text_write(x = character(), path = \"\", encoding = \"UTF-8\")"},{"path":"https://transltr.ununoctium.dev/reference/text-io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Write Text — text_read","text":"path non-empty non-NA character string. path file read text , write text . encoding non-empty non-NA character string. source character encoding. almost cases, UTF-8. encodings internally re-encoded UTF-8 portability. x character vector. Lines text write. current encoding given encoding.","code":""},{"path":"https://transltr.ununoctium.dev/reference/text-io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Write Text — text_read","text":"text_read() returns character vector. text_write() returns NULL, invisibly.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Write Translations — translator_read","title":"Read and Write Translations — translator_read","text":"Export Translator objects text files import files back R Translator objects.","code":""},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Write Translations — translator_read","text":"","code":"translator_read(   path = getOption(\"transltr.path\"),   encoding = \"UTF-8\",   verbose = getOption(\"transltr.verbose\", TRUE),   translations = TRUE )  translator_write(   tr = translator(),   path = getOption(\"transltr.path\"),   overwrite = FALSE,   verbose = getOption(\"transltr.verbose\", TRUE),   translations = TRUE )  translations_read(path = \"\", encoding = \"UTF-8\", tr = NULL)  translations_write(tr = translator(), path = \"\", lang = \"\")  translations_paths(   tr = translator(),   parent_dir = dirname(getOption(\"transltr.path\")) )"},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Write Translations — translator_read","text":"path non-empty non-NA character string. path file read , write . file must Translator file translator_read(). file must translations file translations_read(). See Details information. translator_write() automatically creates parent directories path (recursively) exist. encoding non-empty non-NA character string. source character encoding. almost cases, UTF-8. encodings internally re-encoded UTF-8 portability. verbose non-NA logical value. progress information reported? translations non-NA logical value. translations files also read, written along path (Translator file)? tr Translator object. argument NULL default translations_read(). Translator object passed function, read translations register (long correspond existing source text). overwrite non-NA logical value. existing files overwritten? files detected overwrite set equal TRUE, error thrown. lang non-empty non-NA character string. underlying language. language usually code (two three letters) native language name. users retain full control codes, best use language codes stemming well-known schemes IETF BCP 47, ISO 639-1 maximize portability cross-compatibility. parent_dir non-empty non-NA character string. path parent directory.","code":""},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Write Translations — translator_read","text":"translator_read() returns R6 object class Translator. translator_write() returns NULL, invisibly. used side-effects creating Translator file location given path, creating translations file(s) directory translations TRUE. translations_read() returns S3 object class ExportedTranslations. translations_write() returns NULL, invisibly. translations_paths() returns named character vector.","code":""},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and Write Translations — translator_read","text":"information contained within Translator object split: translations reorganized language exported independently fields. translator_write() creates two types file: single Translator file, zero, translations files. plain text files can inspected modified using wide variety tools systems. target different audiences: Translator file useful developers, translations files meant shared non-technical collaborators translators. translator_read() first reads Translator file creates Translator object . calls translations_paths() list expected translations files (normally stored alongside Translator file), attempts read , registers successfully imported translations. two requirements. files must stored directory. default, set equal inst/transltr/ (see getOption(\"transltr.path\")). Filenames translations files standardized must correspond languages (language codes, see lang). inner workings serialization process thoroughly described serialize().","code":""},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"translator-file","dir":"Reference","previous_headings":"","what":"Translator file","title":"Read and Write Translations — translator_read","text":"Translator file contains YAML (1.1) representation Translator object stripped translations except registered source text.","code":""},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"translations-files","dir":"Reference","previous_headings":"","what":"Translations files","title":"Read and Write Translations — translator_read","text":"translations file contains FLAT representation set translations sharing target language. format attempts simple possible non-technical collaborators.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/translator-io.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Write Translations — translator_read","text":"","code":"# Set source language. language_source_set(\"en\")  # Create a path to a temporary Translator file. temp_path <- tempfile(pattern = \"translator_\", fileext = \".yml\") temp_dir  <- dirname(temp_path)  ## tempdir() could also be used  # Create a Translator object. # This would normally be done by find_source(), or translator_read(). tr <- translator(   id = \"test-translator\",   en = \"English\",   es = \"Español\",   fr = \"Français\",   text(     en = \"Hello, world!\",     fr = \"Bonjour, monde!\"),   text(     en = \"Farewell, world!\",     fr = \"Au revoir, monde!\"))  # Export it. This creates 3 files: 1 Translator file, and 2 translations # files because two non-source languages are registered. The file for # language \"es\" contains placeholders and must be completed. translator_write(tr, temp_path) translator_read(temp_path)  # Translations can be read individually. translations_files <- translations_paths(tr, temp_dir) translations_read(translations_files[[\"es\"]]) translations_read(translations_files[[\"fr\"]])  # This is rarely useful, but translations can also be exported individually. # You may use this to add a new language, as long as it has an entry in the # underlying Translator object (or file). tr$set_native_languages(el = \"Greek\")  translations_files <- translations_paths(tr, temp_dir)  translations_write(tr, translations_files[[\"el\"]], \"el\") translations_read(file.path(temp_dir, \"el.txt\"))"},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Support Many Languages in R — transltr-package","title":"Support Many Languages in R — transltr-package","text":"object model source text translations. Find extract translatable strings. Provide translations seamlessly retrieve runtime.","code":""},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":"introduction","dir":"Reference","previous_headings":"","what":"Introduction","title":"Support Many Languages in R — transltr-package","text":"R relies GNU gettext produce multi-lingual messages (Native Language Support enabled). well-designed software offering extensive set functionalities. ubiquitous withstood test time. objective  transltr (fully) replace . Package transltr provides alternative -memory object model (functions) easily inspect manipulate source text translations. change aspect underlying locale. data serialization formats /O purposes. Source text translations can exported text formats sharable easily modifiable, even non-technical collaborators. features extensively documented (even internal ones). can always locate extract translatable strings (matter source code). Translatable source text treated regular R object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"Support Many Languages in R — transltr-package","text":"Write code normally . Whenever piece text (literal  character vectors) available multiple languages, pass method Translator$translate(). may also use function. ready translate project, call find_source(). returns  Translator object. Export  Translator object  translator_write(). Fill underlying translation files. Import translations back R session  translator_read(). Current language source language respectively set language_set() language_source_get(). default, latter set equal  \"en\" (English).","code":""},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":"bugs-and-feedback","dir":"Reference","previous_headings":"","what":"Bugs and Feedback","title":"Support Many Languages in R — transltr-package","text":"may submit bugs, request features, provide feedback creating issue GitHub.","code":""},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":"acknowledgements","dir":"Reference","previous_headings":"","what":"Acknowledgements","title":"Support Many Languages in R — transltr-package","text":"Warm thanks Jérôme Lavoué, supported sponsored first release project.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/transltr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Support Many Languages in R — transltr-package","text":"Maintainer: Jean-Mathieu Potvin jeanmathieupotvin@ununoctium.dev [copyright holder] contributors: Jérôme Lavoué jerome.lavoue@umontreal.ca (ORCID) [contributor, funder, reviewer]","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-format-vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Vectors — format_vector","title":"Format Vectors — format_vector","text":"Format atomic vectors, lists, pairlists.","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-format-vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Vectors — format_vector","text":"","code":"format_vector(   x = vector(),   label = NULL,   level = 0L,   indent = 1L,   fill_names = FALSE,   null = \"<null>\",   empty = \"<empty>\",   validate = TRUE )"},{"path":"https://transltr.ununoctium.dev/reference/utils-format-vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Vectors — format_vector","text":"x vector atomic mode, list, pairlist. can empty can contain NA values. label NULL, non-empty non-NA character string. top descriptive label x. used preserve, output names recursive calls. value passed label considered level 0, indented. level non-NA integer value. current depth, current nesting level use indentation purposes. indent non-NA integer value. number single space(s) use level indenting name/value pairs. fill_names non-NA logical value. NULL empty names replaced names created elements' underlying positions? Positions relative level. null non-empty non-NA character string. value use represent NULL empty parlists (conceptually thing). empty non-empty non-NA character string. value use represent empty vectors, excluding NULL. See null latter. type underlying empty object added empty convenience. See Examples . validate non-NA logical value. arguments validated used? argument left .","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-format-vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Vectors — format_vector","text":"character vector, possibly trimmed str_trim().","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-format-vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Vectors — format_vector","text":"format_vector() alternative utils::str() exposes much simpler generic formatting interface yields terser outputs name/value pairs. Indentation used nested values. format_vector() attempt cover R objects like utils::str(). Instead, (merely) focuses efficiently handling types used transltr. low-level workhorse function format.Translator(), format.Text(), format.Location().","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/utils-map.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Wrappers — vapply_1l","title":"Apply Wrappers — vapply_1l","text":"functions wrap function apply() family, enforce various values convenience. Arguments passed apply() function.","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Wrappers — vapply_1l","text":"","code":"vapply_1l(x, fun, ...)  vapply_1i(x, fun, ...)  vapply_1c(x, fun, ...)  map(fun, ..., more = list())"},{"path":"https://transltr.ununoctium.dev/reference/utils-map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Wrappers — vapply_1l","text":"x See argument X vapply(). fun See argument FUN vapply(), .mapply(). ... optional arguments passed fun. See argument MoreArgs .mapply().","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Wrappers — vapply_1l","text":"vapply_1l(), vapply_1l(), vapply_1c() respectively return logical, integer, character vector length x. Names always discarded. map() returns list length longest element passed  ....","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/utils-stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw Errors — stops","title":"Throw Errors — stops","text":"stops() equivalent stop(..., call. = FALSE). removes calls error messages default. rarely useful confuse users often help . stopf() equivalent stops(sprintf(fmt, ...)). wraps base::sprintf() stops() used construct flexible error messages.","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw Errors — stops","text":"","code":"stops(...)  stopf(fmt = \"\", ...)"},{"path":"https://transltr.ununoctium.dev/reference/utils-stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw Errors — stops","text":"... arguments respectively passed base::stop() base::sprintf() stops() stopf(). fmt character length 1 passed base::sprintf().","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw Errors — stops","text":"Nothing. functions used side-effect raising error.","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/utils-strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Character String Utilities — str_to","title":"Character String Utilities — str_to","text":"str_to() converts R object character string. slightly flexible alternative base::toString(). str_trim() wraps base::strtrim() adds ... suffix trimmed element. str_wrap() wraps base::strwrap() ensures character string returned.","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Character String Utilities — str_to","text":"","code":"str_to(x, ...)  # Default S3 method str_to(x, quote_values = FALSE, last_sep = \", or \", ...)  str_trim(x = character(), width = 80L)  str_wrap(x = character(), width = 80L)"},{"path":"https://transltr.ununoctium.dev/reference/utils-strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Character String Utilities — str_to","text":"x R object str_to(). character vector otherwise. ... arguments passed , methods. quote_values non-NA logical value. elements x quoted? last_sep non-empty non-NA character string separating last penultimate elements. width non-NA integer value. target width individual elements x. str_trim() takes 3 characters account suffix inserts (...).","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Character String Utilities — str_to","text":"str_to() str_wrap() return character string. str_trim() returns character vector length x.","code":""},{"path":"https://transltr.ununoctium.dev/reference/utils-strings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Character String Utilities — str_to","text":"str_to() concatenates elements \", \", except last one. See argument last_sep. str_wrap() preserves existing paragraph separators (\"\\n\\n\").","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":null,"dir":"Reference","previous_headings":"","what":"Universally Unique Identifiers — uuid","title":"Universally Unique Identifiers — uuid","text":"Generate random UUID (Universally Unique Identifier) complies RFC4122 prescribes. value also known version 4 UUID.","code":""},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Universally Unique Identifiers — uuid","text":"","code":"uuid()  uuid_raw()  uuid_is(x)"},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Universally Unique Identifiers — uuid","text":"x R object.","code":""},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Universally Unique Identifiers — uuid","text":"uuid() returns character length 1 containing exactly 36 characters: 32 hexadecimal characters 4 hyphens (used separators). uuid_raw() returns raw vector length 16. uuid_is() returns logical vector length x. checks whether elements valid version 4 (variant 1) UUIDs . returns FALSE kind UUID.","code":""},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Universally Unique Identifiers — uuid","text":"uuid() calls uuid_raw() formats output accordingly. Pseudo-random bytes generated sample() whenever uuid_raw() called. likely done runtime Translator objects created. uuid_raw() samples values [0, 255] range replacement converts raw values. user must ensure underlying seed appropriate generating UUIDs. See set.seed() information.","code":""},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Universally Unique Identifiers — uuid","text":"UUIDs designed globally unique (collisions extremely unlikely) sometimes called GUIDs (Globally Unique Identifiers). several UUID versions slightly different purposes. Package transltr uses random identifiers (version 4/variant 1, also known DCE 1.1, ISO/IEC 11578:1996).","code":""},{"path":[]},{"path":"https://transltr.ununoctium.dev/reference/uuid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Universally Unique Identifiers — uuid","text":"","code":"uuid() uuid_raw() uuid_is(uuid())      ## TRUE uuid_is(uuid_raw())  ## FALSE, uuid_raw() does not return a string."}]
